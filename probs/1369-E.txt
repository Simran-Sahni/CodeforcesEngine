E. DeadLeetime 2  256 Lee bought some food for dinner time, but Lee's friends eat dinner in a deadly way. Lee is so scared, he doesn't want to die, at least not before seeing Online IOI 2020...There are $$$n$$$ different types of food and $$$m$$$ Lee's best friends. Lee has $$$w_i$$$ plates of the $$$i$$$-th type of food and each friend has two different favorite types of food: the $$$i$$$-th friend's favorite types of food are $$$x_i$$$ and $$$y_i$$$ ($$$x_i \ne y_i$$$).Lee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat one plate of each of his favorite food types. Each of the friends will go to the kitchen exactly once.The only problem is the following: if a friend will eat at least one plate of food (in total) then he will be harmless. But if there is nothing left for him to eat (neither $$$x_i$$$ nor $$$y_i$$$), he will eat Lee instead $$$\times\_\times$$$.Lee can choose the order of friends to call, so he'd like to determine if he can survive dinner or not. Also, he'd like to know the order itself.InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n \le 10^5$$$; $$$1 \le m \le 2 \cdot 10^5$$$) — the number of different food types and the number of Lee's friends. The second line contains $$$n$$$ integers $$$w_1, w_2, \ldots, w_n$$$ ($$$0 \le w_i \le 10^6$$$) — the number of plates of each food type.The $$$i$$$-th line of the next $$$m$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \le x_i, y_i \le n$$$; $$$x_i \ne y_i$$$) — the favorite types of food of the $$$i$$$-th friend. OutputIf Lee can survive the dinner then print ALIVE (case insensitive), otherwise print DEAD (case insensitive).Also, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.     data structures      dfs and similar      greedy      implementation      sortings      *2400 