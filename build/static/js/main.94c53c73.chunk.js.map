{"version":3,"sources":["bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","divStyle","width","height","backgroundImage","Background","backgroundSize","backgroundrepeat","divStyle2","color","App","state","searchText","searchresults","evt","this","setState","target","value","console","log","data","axios","post","then","res","style","rel","href","integrity","crossOrigin","dangerouslySetInnerHTML","__html","textAlign","margin","onChange","updateInputValue","className","type","placeholder","onClick","onSubmit","map","item","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,gC,iOCOrCC,EAAW,CACfC,MAAO,OACPC,OAAQ,SACRC,gBAAgB,OAAD,O,OAASC,EAAT,KACfC,eAAgB,QAChBC,iBAAkB,aAGdC,EAAY,CAChBC,MAAO,SA8DMC,E,4MAzDbC,MAAQ,CACNC,WAAW,KACXC,cAAe,I,+DAGAC,GACfC,KAAKC,SAAS,CACZJ,WAAYE,EAAIG,OAAOC,U,+BAKlBJ,GAAM,IAAD,OAEZK,QAAQC,IAAI,WACZ,IAAMC,EAAO,CAACA,KAAON,KAAKJ,MAAMC,YAChCU,IAAMC,KAAN,yBAAoCF,GACnCG,MAAK,SAAAC,GAAQ,EAAKT,SAAU,CAACH,cAAeY,EAAG,KAAH,YAE7CN,QAAQC,IAAIL,KAAKJ,S,+BAKV,IAAD,OACJ,OACA,yBAAKe,MAAOzB,GACV,8CACA,0BAAM0B,IAAI,aAAaC,KAAK,2EAA2EC,UAAU,0EAA0EC,YAAY,cACvM,2BAAOC,wBAAyB,CAACC,OAAQ,kdACzC,wBAAIN,MAAO,CAACO,UAAW,SAAUxB,MAAO,QAASyB,OAAQ,SAAzD,yCACA,6BACA,0BAAMhB,MAASH,KAAKJ,MAAMC,WAAYuB,SAAU,SAAArB,GAAG,OAAI,EAAKsB,iBAAiBtB,KAC3E,2BAAOuB,UAAU,mBAAmBC,KAAK,OAAOC,YAAY,mCAC5D,2BAAOrB,MAAQ,SAASsB,QAAW,SAAA1B,GAAG,OAAI,EAAK2B,SAAS3B,IAAMuB,UAAU,oBAE1E,6BAGR,2BAAOX,MAASlB,GACd,4BACE,oCACA,0CAGGO,KAAKJ,MAAME,cAAc6B,KAAI,SAACC,EAAKC,GAAN,OAC5B,4BACE,4BAAKA,EAAM,GACX,4BAAKD,a,GAlDGE,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.94c53c73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.3af1ab2a.jpg\";","import React ,{Component}from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport './App.css';\nimport Background from './bg.jpg';\n\nconst divStyle = {\n  width: '100%',\n  height: '1000px',\n  backgroundImage: `url(${Background})`,\n  backgroundSize: 'cover',\n  backgroundrepeat: 'no-repeat'\n};\n\nconst divStyle2 = {\n  color: 'white',\n};\n\nclass App extends Component{\n\n  state = {\n    searchText:null,\n    searchresults :[],\n  }\n\n  updateInputValue(evt) {\n    this.setState({\n      searchText: evt.target.value\n    });\n  }\n\n\n  onSubmit(evt) {\n\n    console.log(\"Radhesh\");\n    const data = {data : this.state.searchText};\n    axios.post(`http://127.0.0.1:5000/`,data)\n    .then(res => {this.setState( {searchresults: res[\"data\"][\"answer\"]})})\n\n    console.log(this.state);\n\n  }\n\n\n  render(){\n      return (\n      <div style={divStyle}>\n        <title>CC Searcher</title>\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossOrigin=\"anonymous\" />\n        <style dangerouslySetInnerHTML={{__html: \"\\n    body {\\n        background-image:  url('bg.jpg') ;\\n        background-repeat: no-repeat;\\n        background-attachment: fixed;\\n        background-color: lightblue;\\n        background-size: cover;\\n        font-family: \\\"Georgia\\\";\\n    }\\n    form{\\n        text-align:center;\\n        margin: 30px 30px 30px 30px;\\n        font-family: bold;\\n        font-size:1 em;\\n    }\\n    p{\\n        text-align:center;\\n        font-size: 1.2em;\\n    }\\n    \" }} />\n        <h3 style={{textAlign: 'center', color: 'green', margin: '40px'}}> Welcome to Codeforces Search Engine </h3>\n        <br/>\n        <form value = {this.state.searchText} onChange={evt => this.updateInputValue(evt)}>\n          <input className=\"col-9 form-group\" type=\"text\" placeholder=\"Enter topic/contest rating....\"/>\n          <input value = \"Submit\" onClick = {evt => this.onSubmit(evt)} className=\"btn-secondary \" />\n        </form>\n        <br/>\n\n\n<table style = {divStyle2}> \n  <tr>\n    <th>Numb</th>\n    <th>File Name</th>\n  </tr>\n\n      {this.state.searchresults.map((item,index) => (\n        <tr>\n          <td>{index+1}</td>\n          <td>{item}</td>\n        </tr>\n      ))}\n  </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}